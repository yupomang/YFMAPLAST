package test;

import com.alibaba.xxpt.gateway.shared.client.http.ExecutableClient;
import com.alibaba.xxpt.gateway.shared.client.http.GetClient;
import com.yondervision.yfmap.common.Constants;
import org.apache.log4j.Logger;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.util.Date;

public class appapi00239test {


    public static String appapi00239test(){

        Logger log = Logger.getLogger("YFMAP");
        log.info("BBBBBBBBBBBBB++BB----AAAAAAAAAAAAAAAAAAA");
        log.info(Constants.LOG_HEAD + "api/appapi00239 begin.");

        Date date = new Date();
        String requestTime = String.valueOf(date.getTime());
        log.info("requestTime1111:" + requestTime);

       /* try {
            trustAllHttpsCertificates();
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    System.out.println("Warning: URL Host: " + urlHostName + " vs. "
                            + session.getPeerHost());
                    return true;
                }
            };
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
        } catch (Exception e) {
            e.printStackTrace();
        }*/
        //String api = "/bpms/openapi/procInst/terminate.json";

       /* String api = "/bpms/openapi/procInst/executeInstTodo.json";
        //ApplicationContext app = new ClassPathXmlApplicationContext("file:D:/Git/YFMAP/yfmap/WebRoot/WEB-INF/applicationContext.xml");
        ApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");
        ExecutableClient executableClient = (ExecutableClient) app.getBean("executableClient");
        GetClient getClient =
                executableClient.getInstance().newGetClient(api);*/
        String api = "/bpms/openapi/procInst/executeInstTodo.json";
        //String api = "/http/bpms/openapi/procInst/executeInstTodo.json";
        ApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");
        //PostClient postClient = ExecutableClient.getInstance().newPostClient(api);
        ExecutableClient executableClient = (ExecutableClient) app.getBean("executableClient");
       // log.info("appapi00239推送参数："+form.getProcInsId()+"+++++"+form.getLoginWorkNo()+"+++++"+form.getAction()+"+++++"+form.getRemark());
        GetClient getClient =
                executableClient.getInstance().newGetClient(api);


        //加参数
        //getClient.addParameter("procInsId","6e32f753-1636-426e-9811-fc32209b4801");
        //getClient.addParameter("procInsId","91b44a9d-a364-4d94-ad05-5dcb87c842e8");
        //getClient.addParameter("procInsId","c3eb40de-0366-401c-aa8c-e9a0445b6464");
        String procInsId = "83684e60-ff3d-4922-a954-fc4c0483c85d";
        getClient.addParameter("procInsId", procInsId);
       // getClient.addParameter("procInsId","b858e355-5374-4e47-ad36-75fa72fd81cb");
        getClient.addParameter("loginWorkNo","2262150");
        getClient.addParameter("action","Agree");
        getClient.addParameter("remark","统一");
        //String apiResult = getClient.get();
        String apiResult = getClient.get();
        System.out.println("zhang++++++++++++++++++++++++"+apiResult);
        return apiResult;
    }

    //zhangjie

   /* private static void trustAllHttpsCertificates() throws Exception {
        javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[1];
        javax.net.ssl.TrustManager tm = new miTM();
        trustAllCerts[0] = tm;
        javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext
                .getInstance("SSL");
        sc.init(null, trustAllCerts, null);
        javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc
                .getSocketFactory());
    }

    static class miTM implements javax.net.ssl.TrustManager,
            javax.net.ssl.X509TrustManager {
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
        }

        public boolean isServerTrusted(
                java.security.cert.X509Certificate[] certs) {
            return true;
        }

        public boolean isClientTrusted(
                java.security.cert.X509Certificate[] certs) {
            return true;
        }

        public void checkServerTrusted(
                java.security.cert.X509Certificate[] certs, String authType)
                throws java.security.cert.CertificateException {
            return;
        }

        public void checkClientTrusted(
                java.security.cert.X509Certificate[] certs, String authType)
                throws java.security.cert.CertificateException {
            return;
        }
    }*/


  /* public static void newappapi00239(){
       Logger log = Logger.getLogger("YFMAP");
       log.info("BBBBBBBBBBBBB++BB----AAAAAAAAAAAAAAAAAAA");
       log.info(Constants.LOG_HEAD + "api/newappapi00239 begin.");

       Date date = new Date();
       String requestTime = String.valueOf(date.getTime());
       log.info("requestTime1111:" + requestTime);

       String url = "https://kexin.gat.zj.gov.cn:9097/kx-api/v1.0/authenticate";
       String postjson = "{\n" +
               "\t\"appKey\":\"72c0e70dd5db4fed9e500d3068886173\",\n" +
               "\t\"authMode\": \"0X42\",\n" +
               "\t\"picData\":\"\",\n" +
               "\t\"authName\": \"AGW9DFVJm14Mdqk7a0eKOQ==\",\n" +
               "\t\"authIdCard\":\"2gwG0hgcO7HNaE4T3prSzHOQNUMuUGHr\"\n" +
               "}";

       //Response post = post(url,postjson);
       //System.out.println(post.body().toString());
       org.apache.http.client.HttpClient httpClient = null;
       HttpPost post = new HttpPost(url);
       System.out.println("rlrz2 开始认证人脸识别");
       StringEntity postingString = new StringEntity(postjson, "utf-8");
       postingString.setContentEncoding(new BasicHeader("Content-Type","application/json"));
       post.setEntity(postingString);
       post.setHeader("Content-type", "application/json");
       System.out.println("rlrz3 开始认证人脸识别");

       try {
           //Security.addProvider(new BouncyCastleProvider());
           *//* httpClient = new SSLClient();
            //CloseableHttpClient httpClient = HttpClients.createDefault();
            HttpResponse response2 = httpClient.execute(post);
            String result = EntityUtils.toString(response2.getEntity());*//*
           String result1 = HttpsUtils.post(url, postjson, "utf-8");
           System.out.println("rlrz result1=" + result1);
           System.out.println("rlrz4 可信身份认证接口"  + result1);
       } *//*catch (IOException e) {
            e.printStackTrace();
        } *//*catch (Exception e) {
           e.printStackTrace();
       }

   }*/



    public static void main(String[] args) {
        /*Logger log = Logger.getLogger("YFMAP");
        log.info("BBBBBBBBBBBBB++BB----AAAAAAAAAAAAAAAAAAA");
        log.info(Constants.LOG_HEAD + "api/appapi00239 begin.");

        //String requestSecret = ShiJiPublicDatasTokenUtil.getPublicDataSecretWithCouchBase(form.getCenterId());
        //log.info(requestSecret);
        Date date = new Date();
        String requestTime = String.valueOf(date.getTime());
        log.info("requestTime1111:" + requestTime);
        //String accessKey = PropertiesReader.getProperty(Constants.PROPERTIES_FILE_NAME, "accessKey").trim();
        //String domainName = PropertiesReader.getProperty(Constants.PROPERTIES_FILE_NAME, "domainName").trim();
        //String secretKey = PropertiesReader.getProperty(Constants.PROPERTIES_FILE_NAME, "secretKey").trim();

        String accessKey = "zwoa_nbgjj_yjs-Qhesv4RANbuERri";
        String  secretKey = "nIw5clfz4ON00JU912KS8rI29J5H33t4Cq687vA3";
        String domainName  = "openplatform.ding.zj.gov.cn";

        String api = "openplatform.ding.zj.gov.cn/bpms/openapi/procInst/terminate.json";
        //PostClient postClient = ExecutableClient.getInstance().newPostClient(api);
        ExecutableClient postClient = ExecutableClient.getInstance();
        postClient.setProtocal("https");
        postClient.setAccessKey(accessKey);
        postClient.setSecretKey(secretKey);
        postClient.setDomainName(domainName);
        //PostClient postClient1 = postClient.newPostClient(api);
        GetClient postClient1 = postClient.newGetClient(api);
        //加参数
        //postClient1.addParameter("procInsId", "this-is-the-proc-ins-is");
        //postClient1.addParameter("loginWorkNo", "my-dingding-id");

        postClient1.addParameter("procInsId", "");
        postClient1.addParameter("loginWorkNo", "");
        postClient1.addParameter("action", "Agree");
        postClient1.addParameter("remark", "Agree");
        //String apiResult = postClient1.post();
        String apiResult = postClient1.get();*/

        String apiResult =  appapi00239test();

    }
}
